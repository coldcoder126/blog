<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2020/12/05/%E5%90%8E%E7%AB%AF/MySQL/hello-world/"/>
      <url>/blog/2020/12/05/%E5%90%8E%E7%AB%AF/MySQL/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2020/12/02/hello-world/"/>
      <url>/blog/2020/12/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/blog/2020/09/07/%E5%90%8E%E7%AB%AF/MySQL/MySQL/"/>
      <url>/blog/2020/09/07/%E5%90%8E%E7%AB%AF/MySQL/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h1><p>MySQL逻辑架构图如下图所示</p><img src="https://dx-personal.oss-cn-hangzhou.aliyuncs.com/blog/backend/mysql/mysql_arch.jpg" style="zoom:50%;"><p>见Mysql优化篇</p><h1 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h1><p> 通过两种锁来实现并发控制：共享锁（读锁）和排他锁（写锁）</p><h2 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h2><p>每种MySQL存储引擎都可以实现自己的锁策略和锁粒度</p><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>表锁是Mysql中最基本和开销最小的策略，它会锁定整张表。</p><p><strong>读锁：</strong>相互不阻塞</p><p><strong>写锁：</strong>一个用户对表进行写操作前，需要先获得写锁，这回阻塞其他用户对该表的所有读写操作。</p><p>写锁比读锁有更高的优先级，一个写锁请求可能会被插入到读锁请求队列的前面</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行级锁可以最大程度地支持并发处理，但通知也带啦了最大的锁开销。</p><p>行级锁只在存储引擎层实现</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务就是一个原子性的SQL查询，事务内的语句要么全部执行成功，要么全部执行失败。事务是由存储引擎实现的。</p><p>一个运行良好的事务处理系统，必须具备ACID特征：</p><p>Atomicity（原子性）：一个事务必须被视为一个不可分割的最小工作单元</p><p>Consistency（一致性）：数据库总是从一个一致性的状态转换为另一个一致性的状态</p><p>Isolation（隔离性）：一个事务所做的修改在最终提交以前，对其他事务是不可见的</p><p>Durability（持久性）：事务一旦提交，则其所做的修改就会永久保存到数据库中。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>隔离性（isolation）比想象中要复杂，所以在SQL标准中定义了四种隔离级别，每一种级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。</p><p><strong>READ UNCOMMITTED（读未提交）：</strong>在这个级别，事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为<strong>脏读</strong>。这个级别会导致很多问题，很少使用。</p><p><strong>READ COMMITTED（提交读）：</strong>一个事务从开始直到提交前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重复读（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。</p><p><strong>REPEATABLE READ（可重复读）：</strong>该级别保证了在同一个事务中多次读取同样的记录结果是一致的。理论上该级别无法解决<strong>幻读</strong>的问题，即两次读行数之间有另一个事务插入了新记录导致的读取结果不一致问题。（实际上InnoDB和XtraDB通过MVCC解决了此问题）</p><p>可重复读是MySQL的默认事务隔离级别。</p><p><strong>SERIALIZABLE（可串行化）</strong>：最高的隔离级别，通过强制事务串行执行避免了所有问题。SERIALIZABLE会在读取的每一行数据上都加锁，这会导致大量的超时和锁争用问题。只有在非常需要确保数据一致性而且可以接受没有并发的情况下，才考虑使用该级别。</p><p>设置隔离级别SQL语句：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET TRANSACTION ISOLATION LEVEL READ COMMITED;</span><br></pre></td></tr></tbody></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁是值两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。</p><p>死锁发生以后，只有部分或者完全回滚其中一个事务，才能打破死锁。</p><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>//TODO</p><h3 id="MySQL中的事务"><a href="#MySQL中的事务" class="headerlink" title="MySQL中的事务"></a>MySQL中的事务</h3><p>MySQL中提供了两种事务型的存储引擎：InnoDB和NDB Cluster</p><p><strong>自动提交（AUTOCOMMIT）：</strong>MySQL默认采用自动提交模式。也就是说，如果不是显示地开始一个事务，则每个查询都被当做一个事务执行提交操作。</p><p>InnoDB采用的是两阶段锁定协议，根据隔离级别在需要的时候自动加锁，在事务的执行过程中，随时都可以执行锁定，锁只有在执行COMMIT或者是ROLLBACK的时候才会释放，并且所有的锁在同一时刻释放。</p><p>##多版本并发控制MVCC</p><p>MySQL的大多数事务型存储引擎实现的都不是简单的行级锁，而是同时实现了多版本并发控制。</p><p>MVCC是行级锁的一个变种，在很多情况下避免了加锁操作，因此开销更低。</p><p>MVCC的实现核心思想是通过保存数据在某个时间点的快照来实现的。InnoDB的MVCC是通过在每行记录后面保存两个隐藏的列来实现的。这两个列一个保存了行的创建时间，一个保存了行的过期/删除时间。（两个存储的内容都并不是时间而是系统版本号，写为时间更好理解）事务开始时刻的版本号会作为事务的版本号，用来和每行记录的版本号进行比较。</p><p>在REPEATABLE READ隔离级别下，MVCC的具体工作逻辑如下：</p><blockquote><p>SELECT</p><p>​    InnoDB会根据以下两个条件检查每行记录：</p><ol><li><p>InnoDB只查找创建时间小于或等于当前事务版本号的数据行，这样可以确保事务读取的行要么是在事务开始前已经存在，要么是自己插入或修改的。</p></li><li><p>行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行在事务开始前未被删除。</p><p>只有复合上述两个条件的记录，才能返回查询结果</p></li></ol><p>INSERT</p><p>​    InnoDB为新插入的每一行保存当前系统版本号作为创建时间</p><p>DELETE</p><p>​    InnoDB为删除的每一行保存当前系统版本号作为删除时间</p><p>UPDATE</p><p>​    InnoDB会插入一行新记录，保存当前系统版本号作为创建时间，同时保存当前系统版本号到原来的行作为    删除时间</p></blockquote><p>优点：使大多数操作可以不用加锁；是的读数据操作简单</p><p>缺点：每行距离需要额外的存储空间和更多的检查工作</p><p>限制：只在REPEATABLE READ和READ COMMITED两个隔离级别下工作</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
